{
    "sourceFile": "src/key/key.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1751206577387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751206698835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import { Key } from './entities/key.entity';\r\n import { Repository } from 'typeorm';\r\n import { CreatedResponse } from 'src/model/success_response';\r\n import {\r\n+  BadRequestErrorResponse,\r\n   InvalidCredentialsErrorResponse,\r\n   UnexpectedErrorResponse,\r\n } from 'src/model/error_response';\r\n import { SharedService } from 'src/shared/shared.service';\r\n@@ -21,10 +22,28 @@\n \r\n   async create(\r\n     createKeyDto: CreateKeyDto,\r\n   ): Promise<\r\n-    CreatedResponse | InvalidCredentialsErrorResponse | UnexpectedErrorResponse\r\n+    | CreatedResponse\r\n+    | InvalidCredentialsErrorResponse\r\n+    | UnexpectedErrorResponse\r\n+    | BadRequestErrorResponse\r\n   > {\r\n+    if (!createKeyDto.applicationId) {\r\n+      return new BadRequestErrorResponse('Application ID is required');\r\n+    }\r\n+\r\n+    const application = await this.sharedService.findApplicationById(\r\n+      createKeyDto.applicationId,\r\n+    );\r\n+\r\n+    if (\r\n+      application instanceof BadRequestErrorResponse ||\r\n+      application instanceof NotFoundErrorResponse\r\n+    ) {\r\n+      return new InvalidCredentialsErrorResponse('Application Does not exist');\r\n+    }\r\n+\r\n     try {\r\n       const keyValue = await this.sharedService.generateKey(createKeyDto);\r\n \r\n       const key = this.keyRepo.create({\r\n"
                },
                {
                    "date": 1751207109423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,13 @@\n import { UpdateKeyDto } from './dto/update-key.dto';\r\n import { InjectRepository } from '@nestjs/typeorm';\r\n import { Key } from './entities/key.entity';\r\n import { Repository } from 'typeorm';\r\n-import { CreatedResponse } from 'src/model/success_response';\r\n+import { CreatedResponse, DataResponse } from 'src/model/success_response';\r\n import {\r\n   BadRequestErrorResponse,\r\n   InvalidCredentialsErrorResponse,\r\n+  NotFoundErrorResponse,\r\n   UnexpectedErrorResponse,\r\n } from 'src/model/error_response';\r\n import { SharedService } from 'src/shared/shared.service';\r\n \r\n@@ -65,14 +66,54 @@\n       return new UnexpectedErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n \r\n-  findAll() {\r\n-    return `This action returns all key`;\r\n+  async findAll(): Promise<DataResponse<Key[]> | NotFoundErrorResponse> {\r\n+    try {\r\n+      const keys = await this.keyRepo.find({\r\n+        relations: ['application'],\r\n+      });\r\n+\r\n+      if (keys.length === 0) {\r\n+        return new NotFoundErrorResponse('No keys found');\r\n+      }\r\n+\r\n+      return new DataResponse<Key[]>('Keys retrieved successfully', keys, 200);\r\n+    } catch (error) {\r\n+      if (error.code === '23503') {\r\n+        // Foreign key violation error code\r\n+        return new NotFoundErrorResponse('No keys found');\r\n+      }\r\n+      return new NotFoundErrorResponse('An unexpected error occurred');\r\n+    }\r\n   }\r\n \r\n-  findOne(id: number) {\r\n-    return `This action returns a #${id} key`;\r\n+  async findOne(\r\n+    id: string,\r\n+  ): Promise<\r\n+    DataResponse<Key> | BadRequestErrorResponse | NotFoundErrorResponse\r\n+  > {\r\n+    if (!id) {\r\n+      return new BadRequestErrorResponse('Key ID is required');\r\n+    }\r\n+\r\n+    try {\r\n+      const key = await this.keyRepo.findOne({\r\n+        where: { id },\r\n+        relations: ['application'],\r\n+      });\r\n+\r\n+      if (!key) {\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+      return new DataResponse<Key>('Key found successfully', key, 200);\r\n+    } catch (error) {\r\n+      if (error.code === '23503') {\r\n+        // Foreign key violation error code\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+      return new BadRequestErrorResponse('An unexpected error occurred');\r\n+    }\r\n   }\r\n \r\n   update(id: number, updateKeyDto: UpdateKeyDto) {\r\n     return `This action updates a #${id} key`;\r\n"
                },
                {
                    "date": 1751207600085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,14 @@\n import { UpdateKeyDto } from './dto/update-key.dto';\r\n import { InjectRepository } from '@nestjs/typeorm';\r\n import { Key } from './entities/key.entity';\r\n import { Repository } from 'typeorm';\r\n-import { CreatedResponse, DataResponse } from 'src/model/success_response';\r\n import {\r\n+  CreatedResponse,\r\n+  DataResponse,\r\n+  UpdatedResponse,\r\n+} from 'src/model/success_response';\r\n+import {\r\n   BadRequestErrorResponse,\r\n   InvalidCredentialsErrorResponse,\r\n   NotFoundErrorResponse,\r\n   UnexpectedErrorResponse,\r\n@@ -114,10 +118,60 @@\n       return new BadRequestErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n \r\n-  update(id: number, updateKeyDto: UpdateKeyDto) {\r\n-    return `This action updates a #${id} key`;\r\n+  update(\r\n+    id: string,\r\n+    updateKeyDto: UpdateKeyDto,\r\n+  ): Promise<\r\n+    UpdatedResponse<Key> | NotFoundErrorResponse | BadRequestErrorResponse\r\n+  > {\r\n+    if (!id) {\r\n+      return BadRequestErrorResponse('Key ID is required');\r\n+    }\r\n+\r\n+    try {\r\n+      const key = await this.keyRepo.findOne({\r\n+        where: { id },\r\n+      });\r\n+\r\n+      if (!key) {\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+\r\n+      if (updateKeyDto.regenerateValue) {\r\n+        const newValue = await this.generateKey({\r\n+          type: key.type,\r\n+          length: updateKeyDto.length,\r\n+          prefix: updateKeyDto.prefix,\r\n+          suffix: updateKeyDto.suffix,\r\n+          includeNumbers: updateKeyDto.includeNumbers,\r\n+          includeSymbols: updateKeyDto.includeSymbols,\r\n+          includeUppercase: updateKeyDto.includeUppercase,\r\n+          includeLowercase: updateKeyDto.includeLowercase,\r\n+        } as CreateKeyDto);\r\n+        updateKeyDto.value = newValue;\r\n+      }\r\n+\r\n+      if (updateKeyDto.expiresAt) {\r\n+        key.expiresAt = new Date(updateKeyDto.expiresAt);\r\n+      }\r\n+\r\n+      return UpdatedResponse<Key>(\r\n+        'Key updated successfully',\r\n+        {\r\n+          ...key,\r\n+          ...updateKeyDto,\r\n+        },\r\n+        200,\r\n+      );\r\n+    } catch (error) {\r\n+      if (error.code === '23503') {\r\n+        // Foreign key violation error code\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+      return new BadRequestErrorResponse('An unexpected error occurred');\r\n+    }\r\n   }\r\n \r\n   remove(id: number) {\r\n     return `This action removes a #${id} key`;\r\n"
                },
                {
                    "date": 1751207606244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,16 +155,9 @@\n       if (updateKeyDto.expiresAt) {\r\n         key.expiresAt = new Date(updateKeyDto.expiresAt);\r\n       }\r\n \r\n-      return UpdatedResponse<Key>(\r\n-        'Key updated successfully',\r\n-        {\r\n-          ...key,\r\n-          ...updateKeyDto,\r\n-        },\r\n-        200,\r\n-      );\r\n+      return UpdatedResponse<Key>('Key updated successfully', 200);\r\n     } catch (error) {\r\n       if (error.code === '23503') {\r\n         // Foreign key violation error code\r\n         return new NotFoundErrorResponse('Key not found');\r\n"
                },
                {
                    "date": 1751207613766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n       if (updateKeyDto.expiresAt) {\r\n         key.expiresAt = new Date(updateKeyDto.expiresAt);\r\n       }\r\n \r\n-      return UpdatedResponse<Key>('Key updated successfully', 200);\r\n+      return new UpdatedResponse<Key>('Key updated successfully', 200);\r\n     } catch (error) {\r\n       if (error.code === '23503') {\r\n         // Foreign key violation error code\r\n         return new NotFoundErrorResponse('Key not found');\r\n"
                },
                {
                    "date": 1751207628593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n   update(\r\n     id: string,\r\n     updateKeyDto: UpdateKeyDto,\r\n   ): Promise<\r\n-    UpdatedResponse<Key> | NotFoundErrorResponse | BadRequestErrorResponse\r\n+    UpdatedResponse | NotFoundErrorResponse | BadRequestErrorResponse\r\n   > {\r\n     if (!id) {\r\n       return BadRequestErrorResponse('Key ID is required');\r\n     }\r\n@@ -155,9 +155,9 @@\n       if (updateKeyDto.expiresAt) {\r\n         key.expiresAt = new Date(updateKeyDto.expiresAt);\r\n       }\r\n \r\n-      return new UpdatedResponse<Key>('Key updated successfully', 200);\r\n+      return new UpdatedResponse('Key updated successfully', 200);\r\n     } catch (error) {\r\n       if (error.code === '23503') {\r\n         // Foreign key violation error code\r\n         return new NotFoundErrorResponse('Key not found');\r\n"
                },
                {
                    "date": 1751207637497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n   ): Promise<\r\n     UpdatedResponse | NotFoundErrorResponse | BadRequestErrorResponse\r\n   > {\r\n     if (!id) {\r\n-      return BadRequestErrorResponse('Key ID is required');\r\n+      return new BadRequestErrorResponse('Key ID is required');\r\n     }\r\n \r\n     try {\r\n       const key = await this.keyRepo.findOne({\r\n"
                },
                {
                    "date": 1751207687841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n       return new BadRequestErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n \r\n-  update(\r\n+  async update(\r\n     id: string,\r\n     updateKeyDto: UpdateKeyDto,\r\n   ): Promise<\r\n     UpdatedResponse | NotFoundErrorResponse | BadRequestErrorResponse\r\n@@ -138,9 +138,9 @@\n         return new NotFoundErrorResponse('Key not found');\r\n       }\r\n \r\n       if (updateKeyDto.regenerateValue) {\r\n-        const newValue = await this.generateKey({\r\n+        const newValue = await this.sharedService.generateKey({\r\n           type: key.type,\r\n           length: updateKeyDto.length,\r\n           prefix: updateKeyDto.prefix,\r\n           suffix: updateKeyDto.suffix,\r\n"
                },
                {
                    "date": 1751207924494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,26 +137,32 @@\n       if (!key) {\r\n         return new NotFoundErrorResponse('Key not found');\r\n       }\r\n \r\n+      let newValue;\r\n       if (updateKeyDto.regenerateValue) {\r\n-        const newValue = await this.sharedService.generateKey({\r\n+        newValue = await this.sharedService.generateKey({\r\n           type: key.type,\r\n           length: updateKeyDto.length,\r\n           prefix: updateKeyDto.prefix,\r\n           suffix: updateKeyDto.suffix,\r\n           includeNumbers: updateKeyDto.includeNumbers,\r\n           includeSymbols: updateKeyDto.includeSymbols,\r\n           includeUppercase: updateKeyDto.includeUppercase,\r\n           includeLowercase: updateKeyDto.includeLowercase,\r\n-        } as CreateKeyDto);\r\n-        updateKeyDto.value = newValue;\r\n+        });\r\n       }\r\n \r\n       if (updateKeyDto.expiresAt) {\r\n         key.expiresAt = new Date(updateKeyDto.expiresAt);\r\n       }\r\n \r\n+      const updatedKey = {\r\n+        ...updateKeyDto,\r\n+        value: newValue,\r\n+      };\r\n+\r\n+      await this.keyRepo.update(id, updatedKey);\r\n       return new UpdatedResponse('Key updated successfully', 200);\r\n     } catch (error) {\r\n       if (error.code === '23503') {\r\n         // Foreign key violation error code\r\n"
                },
                {
                    "date": 1751209218990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,8 +171,71 @@\n       return new BadRequestErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n \r\n-  remove(id: number) {\r\n-    return `This action removes a #${id} key`;\r\n+  async deactivateExpiredKeys(): Promise<void> {\r\n+    await this.keyRepo.update(\r\n+      { expiresAt: new Date(), isActive: true },\r\n+      { isActive: false },\r\n+    );\r\n   }\r\n+\r\n+  async remove(id: string): Promise<NotFoundErrorResponse | CreatedResponse> {\r\n+    const key = await this.keyRepo.findOne({\r\n+      where: { id },\r\n+    });\r\n+\r\n+    if (!key) {\r\n+      return new NotFoundErrorResponse('Key not found');\r\n+    }\r\n+\r\n+    try {\r\n+      await this.keyRepo.delete(id);\r\n+      return new CreatedResponse('Key deleted successfully', 200);\r\n+    } catch (error) {\r\n+      if (error.code === '23503') {\r\n+        // Foreign key violation error code\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+      return new NotFoundErrorResponse('An unexpected error occurred');\r\n+    }\r\n+  }\r\n+\r\n+  async getAllKeysByApplicationId(\r\n+    applicationId: string,\r\n+  ): Promise<\r\n+    DataResponse<Key[]> | NotFoundErrorResponse | BadRequestErrorResponse\r\n+  > {\r\n+    if (!applicationId) {\r\n+      return new BadRequestErrorResponse('Application ID is required');\r\n+    }\r\n+\r\n+    try {\r\n+      const application =\r\n+        await this.sharedService.findApplicationById(applicationId);\r\n+\r\n+      if (\r\n+        application instanceof BadRequestErrorResponse ||\r\n+        application instanceof NotFoundErrorResponse\r\n+      ) {\r\n+        return new NotFoundErrorResponse('Application not found');\r\n+      }\r\n+\r\n+      const keys = await this.keyRepo.find({\r\n+        where: { applicationId: applicationId },\r\n+        relations: ['application'],\r\n+      });\r\n+\r\n+      if (keys.length === 0) {\r\n+        return new NotFoundErrorResponse('No keys found for this application');\r\n+      }\r\n+\r\n+      return new DataResponse<Key[]>('Keys retrieved successfully', keys, 200);\r\n+    } catch (error) {\r\n+      if (error.code === '23503') {\r\n+        // Foreign key violation error code\r\n+        return new NotFoundErrorResponse('Application not found');\r\n+      }\r\n+      return new BadRequestErrorResponse('An unexpected error occurred');\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1751209633861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,5 +237,75 @@\n       }\r\n       return new BadRequestErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n+\r\n+  async deativateKey(\r\n+    id: string,\r\n+  ): Promise<\r\n+    UpdatedResponse | NotFoundErrorResponse | BadRequestErrorResponse\r\n+  > {\r\n+    if (!id) {\r\n+      return new BadRequestErrorResponse('Key ID is required');\r\n+    }\r\n+\r\n+    try {\r\n+      const key = await this.keyRepo.findOne({\r\n+        where: { id },\r\n+      });\r\n+\r\n+      if (!key) {\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+\r\n+      if (!key.isActive) {\r\n+        return new BadRequestErrorResponse('Key is already deactivated');\r\n+      }\r\n+\r\n+      key.isActive = false;\r\n+      await this.keyRepo.save(key);\r\n+\r\n+      return new UpdatedResponse('Key deactivated successfully', 200);\r\n+    } catch (error) {\r\n+      if (error.code === '23503') {\r\n+        // Foreign key violation error code\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+      return new BadRequestErrorResponse('An unexpected error occurred');\r\n+    }\r\n+  }\r\n+\r\n+  async ativateKey(\r\n+    id: string,\r\n+  ): Promise<\r\n+    UpdatedResponse | NotFoundErrorResponse | BadRequestErrorResponse\r\n+  > {\r\n+    if (!id) {\r\n+      return new BadRequestErrorResponse('Key ID is required');\r\n+    }\r\n+\r\n+    try {\r\n+      const key = await this.keyRepo.findOne({\r\n+        where: { id },\r\n+      });\r\n+\r\n+      if (!key) {\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+\r\n+      if (key.isActive) {\r\n+        return new BadRequestErrorResponse('Key is already active');\r\n+      }\r\n+\r\n+      key.isActive = true;\r\n+      await this.keyRepo.save(key);\r\n+\r\n+      return new UpdatedResponse('Key deactivated successfully', 200);\r\n+    } catch (error) {\r\n+      if (error.code === '23503') {\r\n+        // Foreign key violation error code\r\n+        return new NotFoundErrorResponse('Key not found');\r\n+      }\r\n+      return new BadRequestErrorResponse('An unexpected error occurred');\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1751209938412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { CreateKeyDto } from './dto/create-key.dto';\r\n import { UpdateKeyDto } from './dto/update-key.dto';\r\n import { InjectRepository } from '@nestjs/typeorm';\r\n import { Key } from './entities/key.entity';\r\n-import { Repository } from 'typeorm';\r\n+import { LessThan, Repository } from 'typeorm';\r\n import {\r\n   CreatedResponse,\r\n   DataResponse,\r\n   UpdatedResponse,\r\n@@ -171,15 +171,8 @@\n       return new BadRequestErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n \r\n-  async deactivateExpiredKeys(): Promise<void> {\r\n-    await this.keyRepo.update(\r\n-      { expiresAt: new Date(), isActive: true },\r\n-      { isActive: false },\r\n-    );\r\n-  }\r\n-\r\n   async remove(id: string): Promise<NotFoundErrorResponse | CreatedResponse> {\r\n     const key = await this.keyRepo.findOne({\r\n       where: { id },\r\n     });\r\n@@ -307,5 +300,24 @@\n       }\r\n       return new BadRequestErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n+\r\n+  async deactivateExpiredKeys(): Promise<\r\n+    UpdatedResponse | NotFoundErrorResponse\r\n+  > {\r\n+    try {\r\n+      const result = await this.keyRepo.update(\r\n+        { expiresAt: LessThan(new Date()), isActive: true },\r\n+        { isActive: false },\r\n+      );\r\n+\r\n+      if (result.affected === 0) {\r\n+        return new NotFoundErrorResponse('No expired keys found');\r\n+      }\r\n+\r\n+      return new UpdatedResponse('Expired keys deactivated successfully', 200);\r\n+    } catch (error) {\r\n+      return new NotFoundErrorResponse('An unexpected error occurred');\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1751210241122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n       return new BadRequestErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n \r\n-  async deativateKey(\r\n+  async deactivateKey(\r\n     id: string,\r\n   ): Promise<\r\n     UpdatedResponse | NotFoundErrorResponse | BadRequestErrorResponse\r\n   > {\r\n@@ -266,9 +266,9 @@\n       return new BadRequestErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n \r\n-  async ativateKey(\r\n+  async activateKey(\r\n     id: string,\r\n   ): Promise<\r\n     UpdatedResponse | NotFoundErrorResponse | BadRequestErrorResponse\r\n   > {\r\n"
                },
                {
                    "date": 1751442865251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,5 +319,40 @@\n     } catch (error) {\r\n       return new NotFoundErrorResponse('An unexpected error occurred');\r\n     }\r\n   }\r\n+\r\n+  async deleteAllKeysByApplicationId(\r\n+    applicationId: string,\r\n+  ): Promise<\r\n+    CreatedResponse | NotFoundErrorResponse | BadRequestErrorResponse\r\n+  > {\r\n+    if (!applicationId) {\r\n+      return new BadRequestErrorResponse('Application ID is required');\r\n+    }\r\n+\r\n+    try {\r\n+      const application =\r\n+        await this.sharedService.findApplicationById(applicationId);\r\n+\r\n+      if (\r\n+        application instanceof BadRequestErrorResponse ||\r\n+        application instanceof NotFoundErrorResponse\r\n+      ) {\r\n+        return new NotFoundErrorResponse('Application not found');\r\n+      }\r\n+\r\n+      await this.keyRepo.delete({ applicationId: applicationId });\r\n+\r\n+      return new CreatedResponse(\r\n+        'All keys for the application deleted successfully',\r\n+        200,\r\n+      );\r\n+    } catch (error) {\r\n+      if (error.code === '23503') {\r\n+        // Foreign key violation error code\r\n+        return new NotFoundErrorResponse('Application not found');\r\n+      }\r\n+      return new BadRequestErrorResponse('An unexpected error occurred');\r\n+    }\r\n+  }\r\n }\r\n"
                }
            ],
            "date": 1751206577387,
            "name": "Commit-0",
            "content": "import { Injectable } from '@nestjs/common';\r\nimport { CreateKeyDto } from './dto/create-key.dto';\r\nimport { UpdateKeyDto } from './dto/update-key.dto';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Key } from './entities/key.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { CreatedResponse } from 'src/model/success_response';\r\nimport {\r\n  InvalidCredentialsErrorResponse,\r\n  UnexpectedErrorResponse,\r\n} from 'src/model/error_response';\r\nimport { SharedService } from 'src/shared/shared.service';\r\n\r\n@Injectable()\r\nexport class KeyService {\r\n  constructor(\r\n    @InjectRepository(Key)\r\n    private readonly keyRepo: Repository<Key>,\r\n    private readonly sharedService: SharedService,\r\n  ) {}\r\n\r\n  async create(\r\n    createKeyDto: CreateKeyDto,\r\n  ): Promise<\r\n    CreatedResponse | InvalidCredentialsErrorResponse | UnexpectedErrorResponse\r\n  > {\r\n    try {\r\n      const keyValue = await this.sharedService.generateKey(createKeyDto);\r\n\r\n      const key = this.keyRepo.create({\r\n        ...createKeyDto,\r\n        value: keyValue,\r\n        expiresAt: createKeyDto.expiresAt\r\n          ? new Date(createKeyDto.expiresAt)\r\n          : null,\r\n      });\r\n\r\n      await this.keyRepo.save(key);\r\n\r\n      return new CreatedResponse('Key created successfully', 200);\r\n    } catch (error) {\r\n      if (error.code === '23505') {\r\n        // Unique violation error code\r\n        return new InvalidCredentialsErrorResponse('Key already exists');\r\n      }\r\n      return new UnexpectedErrorResponse('An unexpected error occurred');\r\n    }\r\n  }\r\n\r\n  findAll() {\r\n    return `This action returns all key`;\r\n  }\r\n\r\n  findOne(id: number) {\r\n    return `This action returns a #${id} key`;\r\n  }\r\n\r\n  update(id: number, updateKeyDto: UpdateKeyDto) {\r\n    return `This action updates a #${id} key`;\r\n  }\r\n\r\n  remove(id: number) {\r\n    return `This action removes a #${id} key`;\r\n  }\r\n}\r\n"
        }
    ]
}