{
    "sourceFile": "src/application/application.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1751199194426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751199268856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,26 @@\n       );\r\n     }\r\n   }\r\n \r\n-  findAll() {\r\n-    return `This action returns all application`;\r\n+  async findAll(): Promise<\r\n+    DataResponse<Application[]> | UnexpectedErrorResponse\r\n+  > {\r\n+    try {\r\n+      const applications = await this.appRepo.find();\r\n+      if (applications.length === 0) {\r\n+        return new NotFoundErrorResponse('No applications found');\r\n+      }\r\n+\r\n+      return new DataResponse(\r\n+        'Applications retrieved successfully',\r\n+        applications,\r\n+      );\r\n+    } catch (error) {\r\n+      return new UnexpectedErrorResponse(\r\n+        `Failed to retrieve applications: ${error.message}`,\r\n+      );\r\n+    }\r\n   }\r\n \r\n   findOne(id: number) {\r\n     return `This action returns a #${id} application`;\r\n"
                },
                {
                    "date": 1751199417209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,14 +62,54 @@\n       );\r\n     }\r\n   }\r\n \r\n-  findOne(id: number) {\r\n-    return `This action returns a #${id} application`;\r\n+  async findOne(\r\n+    id: string,\r\n+  ): Promise<\r\n+    DataResponse<Application> | NotFoundErrorResponse | UnexpectedErrorResponse\r\n+  > {\r\n+    try {\r\n+      const application = await this.appRepo.findOne({\r\n+        where: { id },\r\n+      });\r\n+\r\n+      if (!application) {\r\n+        return new NotFoundErrorResponse(`Application with id ${id} not found`);\r\n+      }\r\n+\r\n+      return new DataResponse(\r\n+        `Application with id ${id} retrieved successfully`,\r\n+        application,\r\n+      );\r\n+    } catch (error) {\r\n+      return new UnexpectedErrorResponse(\r\n+        `Failed to retrieve application with id ${id}: ${error.message}`,\r\n+      );\r\n+    }\r\n   }\r\n \r\n-  update(id: number, updateApplicationDto: UpdateApplicationDto) {\r\n-    return `This action updates a #${id} application`;\r\n+  async update(id: string, updateApplicationDto: UpdateApplicationDto) {\r\n+    const application = await this.appRepo.findOne({ where: { id } });\r\n+\r\n+    if (!application) {\r\n+      return new NotFoundErrorResponse(`Application with id ${id} not found`);\r\n+    }\r\n+\r\n+    try {\r\n+      const updatedApplication = await this.appRepo.update(\r\n+        application.id,\r\n+        updateApplicationDto,\r\n+      );\r\n+      return new DataResponse(\r\n+        `Application with id ${id} updated successfully`,\r\n+        updatedApplication,\r\n+      );\r\n+    } catch (error) {\r\n+      return new UnexpectedErrorResponse(\r\n+        `Failed to update application with id ${id}: ${error.message}`,\r\n+      );\r\n+    }\r\n   }\r\n \r\n   remove(id: number) {\r\n     return `This action removes a #${id} application`;\r\n"
                },
                {
                    "date": 1751199583925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,13 @@\n import { Injectable } from '@nestjs/common';\r\n import { CreateApplicationDto } from './dto/create-application.dto';\r\n import { UpdateApplicationDto } from './dto/update-application.dto';\r\n-import { CreatedResponse, DataResponse } from 'src/model/success_response';\r\n import {\r\n+  CreatedResponse,\r\n+  DataResponse,\r\n+  UpdatedResponse,\r\n+} from 'src/model/success_response';\r\n+import {\r\n   NotFoundErrorResponse,\r\n   UnexpectedErrorResponse,\r\n } from 'src/model/error_response';\r\n import { Application } from './entities/application.entity';\r\n@@ -46,9 +50,11 @@\n   async findAll(): Promise<\r\n     DataResponse<Application[]> | UnexpectedErrorResponse\r\n   > {\r\n     try {\r\n-      const applications = await this.appRepo.find();\r\n+      const applications = await this.appRepo.find({\r\n+        where: { isActive: true },\r\n+      });\r\n       if (applications.length === 0) {\r\n         return new NotFoundErrorResponse('No applications found');\r\n       }\r\n \r\n@@ -110,8 +116,62 @@\n       );\r\n     }\r\n   }\r\n \r\n-  remove(id: number) {\r\n-    return `This action removes a #${id} application`;\r\n+  async activate(\r\n+    id: string,\r\n+  ): Promise<\r\n+    UpdatedResponse | NotFoundErrorResponse | UnexpectedErrorResponse\r\n+  > {\r\n+    const application = await this.appRepo.findOne({ where: { id } });\r\n+\r\n+    if (!application) {\r\n+      return new NotFoundErrorResponse(`Application with id ${id} not found`);\r\n+    }\r\n+\r\n+    if (application.isActive) {\r\n+      return new NotFoundErrorResponse('Application is already activated');\r\n+    }\r\n+\r\n+    try {\r\n+      application.isActive = true;\r\n+      await this.appRepo.update(application.id, application);\r\n+      return new UpdatedResponse(\r\n+        `Application with id ${id} activated successfully`,\r\n+        200,\r\n+      );\r\n+    } catch (error) {\r\n+      return new UnexpectedErrorResponse(\r\n+        `Failed to activate application with id ${id}: ${error.message}`,\r\n+      );\r\n+    }\r\n   }\r\n+\r\n+  async deActivate(\r\n+    id: string,\r\n+  ): Promise<\r\n+    UpdatedResponse | NotFoundErrorResponse | UnexpectedErrorResponse\r\n+  > {\r\n+    const application = await this.appRepo.findOne({ where: { id } });\r\n+\r\n+    if (!application) {\r\n+      return new NotFoundErrorResponse(`Application with id ${id} not found`);\r\n+    }\r\n+\r\n+    if (!application.isActive) {\r\n+      return new NotFoundErrorResponse('Application is already deactivated');\r\n+    }\r\n+\r\n+    try {\r\n+      application.isActive = false;\r\n+      await this.appRepo.update(application.id, application);\r\n+      return new UpdatedResponse(\r\n+        `Application with id ${id} activated successfully`,\r\n+        200,\r\n+      );\r\n+    } catch (error) {\r\n+      return new UnexpectedErrorResponse(\r\n+        `Failed to activate application with id ${id}: ${error.message}`,\r\n+      );\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1751371297209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,5 +173,27 @@\n         `Failed to activate application with id ${id}: ${error.message}`,\r\n       );\r\n     }\r\n   }\r\n+\r\n+  async delete(id: string): Promise<UpdatedResponse | NotFoundErrorResponse | UnexpectedErrorResponse> {\r\n+    const application = await this.appRepo.findOne({ where: { id } });\r\n+\r\n+    if (!application) {\r\n+      return new NotFoundErrorResponse(`Application with id ${id} not found`);\r\n+    }\r\n+\r\n+    try {\r\n+      await this.appRepo.delete(id);\r\n+      return new UpdatedResponse(\r\n+        `Application with id ${id} deleted successfully`,\r\n+        200,\r\n+      );\r\n+    } catch (error) {\r\n+      return new UnexpectedErrorResponse(\r\n+        `Failed to delete application with id ${id}: ${error.message}`,\r\n+      );\r\n+    }\r\n+\r\n+  }\r\n+\r\n }\r\n"
                },
                {
                    "date": 1751381002947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n   > {\r\n     try {\r\n       const applications = await this.appRepo.find({\r\n         where: { isActive: true },\r\n+        relations: ['key']\r\n       });\r\n       if (applications.length === 0) {\r\n         return new NotFoundErrorResponse('No applications found');\r\n       }\r\n"
                },
                {
                    "date": 1751382151257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n   > {\r\n     try {\r\n       const applications = await this.appRepo.find({\r\n         where: { isActive: true },\r\n-        relations: ['key'],\r\n+        relations: ['keys'],\r\n       });\r\n       if (applications.length === 0) {\r\n         return new NotFoundErrorResponse('No applications found');\r\n       }\r\n"
                },
                {
                    "date": 1751383245893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         `Application ${savedApplication.name} created successfully`,\r\n       );\r\n     } catch (error) {\r\n       return new UnexpectedErrorResponse(\r\n-        `Failed to create application: ${error.message}`,\r\n+        `Failed to create application: ${error.message} `,\r\n       );\r\n     }\r\n   }\r\n \r\n"
                }
            ],
            "date": 1751199194426,
            "name": "Commit-0",
            "content": "import { Injectable } from '@nestjs/common';\r\nimport { CreateApplicationDto } from './dto/create-application.dto';\r\nimport { UpdateApplicationDto } from './dto/update-application.dto';\r\nimport { CreatedResponse, DataResponse } from 'src/model/success_response';\r\nimport {\r\n  NotFoundErrorResponse,\r\n  UnexpectedErrorResponse,\r\n} from 'src/model/error_response';\r\nimport { Application } from './entities/application.entity';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApplicationService {\r\n  constructor(\r\n    @InjectRepository(Application)\r\n    private readonly appRepo: Repository<Application>,\r\n  ) {}\r\n\r\n  async create(\r\n    createApplicationDto: CreateApplicationDto,\r\n  ): Promise<CreatedResponse | UnexpectedErrorResponse> {\r\n    const applicationExist = await this.appRepo.findOne({\r\n      where: { name: createApplicationDto.name },\r\n    });\r\n\r\n    if (applicationExist) {\r\n      return new NotFoundErrorResponse(\r\n        `Application with name ${createApplicationDto.name} already exists`,\r\n      );\r\n    }\r\n\r\n    const application = this.appRepo.create(createApplicationDto);\r\n    try {\r\n      const savedApplication = await this.appRepo.save(application);\r\n      return new CreatedResponse(\r\n        `Application ${savedApplication.name} created successfully`,\r\n      );\r\n    } catch (error) {\r\n      return new UnexpectedErrorResponse(\r\n        `Failed to create application: ${error.message}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  findAll() {\r\n    return `This action returns all application`;\r\n  }\r\n\r\n  findOne(id: number) {\r\n    return `This action returns a #${id} application`;\r\n  }\r\n\r\n  update(id: number, updateApplicationDto: UpdateApplicationDto) {\r\n    return `This action updates a #${id} application`;\r\n  }\r\n\r\n  remove(id: number) {\r\n    return `This action removes a #${id} application`;\r\n  }\r\n}\r\n"
        }
    ]
}